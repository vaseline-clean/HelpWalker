import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, ActivityIndicator, ScrollView, Alert } from 'react-native';
import axios from 'axios';
import MapView, { Marker } from 'react-native-maps';
import AsyncStorage from '@react-native-async-storage/async-storage';

export default function AcceptTaskScreen({ navigation }) {
  const [taskId, setTaskId] = useState(null); // state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö taskId
  const [task, setTask] = useState(null); // state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à
  const [loading, setLoading] = useState(true); // state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î

  useEffect(() => {
    // ‡∏î‡∏∂‡∏á taskId ‡∏à‡∏≤‡∏Å AsyncStorage
    const fetchTaskId = async () => {
      const storedTaskId = await AsyncStorage.getItem('taskId');
      if (storedTaskId) {
        setTaskId(storedTaskId); // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ taskId ‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡πá‡∏ï‡πÑ‡∏ß‡πâ‡πÉ‡∏ô state
        console.log("taskId saved:", storedTaskId);
      } else {
        console.log("taskId is missing");
      }
    };

    fetchTaskId();
  }, []);

  useEffect(() => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ taskId ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!taskId) {
      setLoading(false); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ taskId ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î
      return;
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏à‡∏≤‡∏Å API
    const fetchTask = async () => {
      try {
        const response = await axios.get(`http://10.30.136.56:3001/tasks/${taskId}`);
        setTask(response.data);
        setLoading(false);
        console.log("Task Data:", response.data);
      } catch (error) {
        console.error("Error fetching task:", error);
        setLoading(false);
      }
    };

    fetchTask();
  }, [taskId]); // ‡∏ü‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á taskId

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#4CAF50" />
      </View>
    );
  }

  if (!task) {
    return (
      <View style={styles.loadingContainer}>
        <Text style={styles.errorText}>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à</Text>
      </View>
    );
  }

  const { title, description, creatorName, creatorPhone, address, reward, latitude, longitude } = task;

  const handleDelete = async (taskId) => {
    Alert.alert(
      "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö?",
      "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ô‡∏µ‡πâ?",
      [
        { text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style: "cancel" },
        {
          text: "‡∏•‡∏ö",
          onPress: async () => {
            try {
              const storedToken = await AsyncStorage.getItem('userToken');
              await fetch(`http://10.30.136.56:3001/tasks/${taskId}`, {
                method: 'DELETE',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${storedToken}`,
                },
              });

              Alert.alert('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏•‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
              navigation.goBack();
            } catch (error) {
              console.error('Error deleting task:', error);
              Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÑ‡∏î‡πâ');
            }
          },
        },
      ]
    );
  };

  const handleRedo = async (taskId) => {
    Alert.alert(
      "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡∏°‡πà?",
      "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ô‡∏µ‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
      [
        { text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style: "cancel" },
        {
          text: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
          onPress: async () => {
            try {
              const storedTasks = JSON.parse(await AsyncStorage.getItem('completedTasks')) || [];
              const taskToRedo = storedTasks.find(task => task._id === taskId);
              
              if (!taskToRedo) return;

              // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô 'pending'
              taskToRedo.status = 'pending';

              // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å completedTasks ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á pendingTasks
              const updatedCompletedTasks = storedTasks.filter(task => task._id !== taskId);
              await AsyncStorage.setItem('completedTasks', JSON.stringify(updatedCompletedTasks));

              const pendingTasks = JSON.parse(await AsyncStorage.getItem('pendingTasks')) || [];
              pendingTasks.push(taskToRedo);
              await AsyncStorage.setItem('pendingTasks', JSON.stringify(pendingTasks));

              Alert.alert('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£');
              navigation.goBack();
            } catch (error) {
              console.error('Error updating task status:', error);
              Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÑ‡∏î‡πâ');
            }
          },
        },
      ]
    );
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      {/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à */}
      {title || description ? (
        <View style={styles.card}>
          {title && <Text style={styles.missionTitle}>{title}</Text>}
          {description && (
            <>
              <Text style={styles.missionDetailsTitle}>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à</Text>
              <Text style={styles.missionDetails}>{description}</Text>
            </>
          )}
        </View>
      ) : null}

      {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à */}
      {creatorName || creatorPhone ? (
        <View style={styles.card}>
          <Text style={styles.sectionTitle}>üë§ ‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à</Text>
          {creatorName && <Text style={styles.userName}>{creatorName}</Text>}
          {creatorPhone && <Text style={styles.userPhone}>üìû {creatorPhone}</Text>}
        </View>
      ) : null}

      {/* ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à */}
      {address ? (
        <View style={styles.card}>
          <Text style={styles.sectionTitle}>üìç ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</Text>
          <Text style={styles.address}>{address}</Text>
        </View>
      ) : null}

      {/* ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô */}
      {reward ? (
        <View style={styles.card}>
          <Text style={styles.sectionTitle}>üéÅ ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô</Text>
          <Text style={styles.reward}>{reward}</Text>
        </View>
      ) : null}

      {/* ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà */}
      {latitude && longitude ? (
        <View style={styles.card}>
          <Text style={styles.sectionTitle}>üó∫ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à</Text>
          <MapView
            style={styles.map}
            initialRegion={{
              latitude: latitude,
              longitude: longitude,
              latitudeDelta: 0.0922,
              longitudeDelta: 0.0421,
            }}
          >
            <Marker coordinate={{ latitude, longitude }} />
          </MapView>
        </View>
      ) : (
        <Text style={styles.errorText}>‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î</Text>
      )}

      {/* ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à */}
      <TouchableOpacity
        style={styles.acceptButton}
        onPress={async () => {
          try {
            const token = await AsyncStorage.getItem('userToken');
            const response = await fetch(`http://10.30.136.56:3001/tasks/${taskId}/accept`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`,
              },
              body: JSON.stringify({ status: 'accepted' }),
            });

            if (!response.ok) {
              if (response.status === 404) {
                throw new Error('Task not found. It might have been removed.');
              }
              const errorText = await response.text();
              throw new Error(`Network response was not ok: ${errorText}`);
            }

            Alert.alert('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
            console.log("Task Accepted:", task);
          } catch (error) {
            console.error('Error accepting task:', error);
            Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÑ‡∏î‡πâ: ${error.message}`);
          }
        }}
      >
        <Text style={styles.acceptButtonText}>‚úÖ ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à</Text>
      </TouchableOpacity>

      {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏≥‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏•‡∏ö */}
      <View style={styles.buttonContainer}>
        <TouchableOpacity style={styles.redoButton} onPress={() => handleRedo(task._id)}>
          <Text style={styles.buttonText}>‡∏ó‡∏≥‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.deleteButton} onPress={() => handleDelete(task._id)}>
          <Text style={styles.buttonText}>‡∏•‡∏ö</Text>
        </TouchableOpacity>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    padding: 20,
    backgroundColor: '#F3F4F6',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F3F4F6',
  },
  errorText: {
    fontSize: 18,
    color: 'red',
    fontWeight: 'bold',
    textAlign: 'center',
    marginTop: 10,
  },
  card: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 20,
    marginBottom: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 6,
    elevation: 5,
  },
  missionTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
  },
  missionDetailsTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#555',
    marginTop: 10,
  },
  missionDetails: {
    fontSize: 16,
    color: '#666',
    marginTop: 5,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#555',
    marginTop: 10,
  },
  userName: {
    fontSize: 16,
    color: '#333',
  },
  userPhone: {
    fontSize: 16,
    color: '#333',
  },
  address: {
    fontSize: 16,
    color: '#333',
  },
  reward: {
    fontSize: 16,
    color: '#333',
  },
  map: {
    height: 250,
    borderRadius: 12,
    marginTop: 10,
  },
  acceptButton: {
    backgroundColor: '#4CAF50',
    paddingVertical: 15,
    borderRadius: 10,
    marginTop: 20,
    alignItems: 'center',
  },
  acceptButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 30,
  },
  redoButton: {
    backgroundColor: '#FF9800',
    paddingVertical: 15,
    borderRadius: 10,
    flex: 0.48,
    alignItems: 'center',
  },
  deleteButton: {
    backgroundColor: '#F44336',
    paddingVertical: 15,
    borderRadius: 10,
    flex: 0.48,
    alignItems: 'center',
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});
