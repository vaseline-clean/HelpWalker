import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, ScrollView, Alert, RefreshControl, TouchableOpacity } from 'react-native';
import CustomHeader from '../components/CustomHeader';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { jwtDecode } from 'jwt-decode';

const TaskCard = ({ task, onDelete, onRedo }) => {
  return (
    <View style={styles.card}>
      <Text style={styles.title}>{task.title}</Text>
      <Text style={styles.description}>{task.description}</Text>
      <Text style={styles.status}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {String(task.status)}</Text>

      {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏° "‡∏ó‡∏≥‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á" ‡πÅ‡∏•‡∏∞ "‡∏•‡∏ö" ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏Å‡∏±‡∏ô */}
      <View style={styles.buttonContainer}>
        <TouchableOpacity style={styles.redoButton} onPress={() => onRedo(task._id)}>
          <Text style={styles.buttonText}>‡∏ó‡∏≥‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.deleteButton} onPress={() => onDelete(task._id)}>
          <Text style={styles.buttonText}>‡∏•‡∏ö</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

export default function CompletedTasksScreen({ navigation }) {
  const [completedTasks, setCompletedTasks] = useState([]);
  const [userId, setUserId] = useState(null);
  const [isRefreshing, setIsRefreshing] = useState(false);

  useEffect(() => {
    fetchCompletedTasks();
  }, []);

  const fetchCompletedTasks = async () => {
    try {
      setIsRefreshing(true);
      const storedToken = await AsyncStorage.getItem('userToken');
      if (storedToken) {
        const decodedToken = jwtDecode(storedToken);
        const user_id = decodedToken?.user_id || decodedToken?.id;
        setUserId(user_id);

        const storedCompletedTasks = JSON.parse(await AsyncStorage.getItem('completedTasks')) || [];
        const userTasks = storedCompletedTasks.filter(task => task.createdBy === user_id);
        setCompletedTasks(userTasks);
      }
    } catch (error) {
      console.error('Error fetching completed tasks:', error);
      Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÑ‡∏î‡πâ');
    } finally {
      setIsRefreshing(false);
    }
  };

  const handleDelete = async (taskId) => {
    Alert.alert(
      "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö?",
      "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ô‡∏µ‡πâ?",
      [
        { text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style: "cancel" },
        {
          text: "‡∏•‡∏ö",
          onPress: async () => {
            try {
              const storedToken = await AsyncStorage.getItem('userToken');
              await fetch(`http://10.30.136.56:3001/tasks/${taskId}`, {
                method: 'DELETE',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${storedToken}`,
                },
              });

              const updatedTasks = completedTasks.filter((task) => task._id !== taskId);
              setCompletedTasks(updatedTasks);
              await AsyncStorage.setItem('completedTasks', JSON.stringify(updatedTasks));

              Alert.alert('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏•‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
            } catch (error) {
              console.error('Error deleting task:', error);
              Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÑ‡∏î‡πâ');
            }
          },
        },
      ]
    );
  };

 const handleRedo = async (taskId) => {
  Alert.alert(
    "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡∏°‡πà?",
    "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ô‡∏µ‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    [
      { text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style: "cancel" },
      {
        text: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
        onPress: async () => {
          try {
            const storedToken = await AsyncStorage.getItem('userToken');
            if (!storedToken) throw new Error("Token not found");

            // **üì° ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå**
            const response = await fetch(`http://10.30.136.56:3001/tasks/${taskId}/redo`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${storedToken}`,
              },
              body: JSON.stringify({ status: 'pending' }), // üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "pending"
            });

            if (!response.ok) throw new Error("Failed to update task status");

            // **üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô AsyncStorage**
            const storedTasks = JSON.parse(await AsyncStorage.getItem('completedTasks')) || [];
            const taskToRedo = storedTasks.find(task => task._id === taskId);
            
            if (!taskToRedo) return;

            taskToRedo.status = 'pending';

            // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å completedTasks ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á pendingTasks
            const updatedCompletedTasks = storedTasks.filter(task => task._id !== taskId);
            await AsyncStorage.setItem('completedTasks', JSON.stringify(updatedCompletedTasks));

            const pendingTasks = JSON.parse(await AsyncStorage.getItem('pendingTasks')) || [];
            pendingTasks.push(taskToRedo);
            await AsyncStorage.setItem('pendingTasks', JSON.stringify(pendingTasks));

            setCompletedTasks(updatedCompletedTasks);
            Alert.alert('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£');
          } catch (error) {
            console.error('Error updating task status:', error);
            Alert.alert('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÑ‡∏î‡πâ');
          }
        },
      },
    ]
  );
};


  return (
    <View style={styles.container}>
      <CustomHeader navigation={navigation} title="‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" />

      <ScrollView 
        contentContainerStyle={styles.scrollView}
        refreshControl={<RefreshControl refreshing={isRefreshing} onRefresh={fetchCompletedTasks} />}
      >
        {completedTasks.length > 0 ? (
          completedTasks.map((task) => (
            <TaskCard key={task._id} task={task} onDelete={handleDelete} onRedo={handleRedo} />
          ))
        ) : (
          <Text style={styles.noTaskText}>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ</Text>
        )}
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f4f4f4',
    padding: 1,
  },
  scrollView: {
    paddingBottom: 16,
  },
  noTaskText: {
    fontSize: 14,
    color: '#888',
    textAlign: 'center',
    marginTop: 20,
  },
  card: {
    top: 20,
    backgroundColor: '#fff',
    borderRadius: 10,
    padding: 16,
    marginBottom: 16,
    elevation: 3,
  },
  title: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  description: {
    fontSize: 14,
    color: '#666',
    marginBottom: 16,
  },
  status: {
    fontSize: 14,
    color: '#888',
  },
  buttonContainer: {
    flexDirection: 'row', // ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏Å‡∏±‡∏ô
    justifyContent: 'space-between',
    marginTop: 10,
  },
  redoButton: {
    flex: 1,
    backgroundColor: '#4CAF50',
    paddingVertical: 8,
    marginRight: 5,
    borderRadius: 5,
    alignItems: 'center',
  },
  deleteButton: {
    flex: 1,
    backgroundColor: '#F44336',
    paddingVertical: 8,
    marginLeft: 5,
    borderRadius: 5,
    alignItems: 'center',
  },
  buttonText: {
    color: '#fff',
    fontWeight: 'bold',
  },
});
